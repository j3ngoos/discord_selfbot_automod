import discord
import aiohttp
import asyncio
import os
import torch
import torch.nn.functional as F
from transformers import AutoTokenizer, AutoModelForSequenceClassification
from datetime import datetime, timezone, timedelta
from dotenv import load_dotenv
from collections import defaultdict
import re
import threading
import pygame
import json
from tkinter import messagebox, Tk

# --- –ó–∞–≥—Ä—É–∑–∫–∞ ENV ---
load_dotenv()
TOKEN = os.getenv("TOKEN")
TOXICITY_THRESHOLD = float(os.getenv("TOXICITY_THRESHOLD", 0.7))
CHANNELS_FORCHECK = [int(x) for x in os.getenv("CHANNELS_Forcheck", "").split(",") if x]
MUTE_BOT_ID = int(os.getenv("MUTE_BOT_ID"))
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
MISTRAL_MODEL = os.getenv("MISTRAL_MODEL", "mistral")
OLLAMA_URL = os.getenv("OLLAMA_URL", "http://localhost:11434/api/generate")

IGNORED_USERS = [709716833841971231]  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ user_id
MODERATOR_ID = 848876544536608768
MANUAL_MODE = True

pygame.mixer.init()

VIOLATIONS_PATH = "violations.json"
def load_violations():
    if os.path.exists(VIOLATIONS_PATH):
        with open(VIOLATIONS_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_violations(data):
    with open(VIOLATIONS_PATH, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

violations_data = load_violations()

def add_violation(uid):
    now_str = datetime.now(timezone(timedelta(hours=3))).strftime("%Y-%m-%d %H:%M:%S")
    entry = violations_data.get(str(uid), {"total": 0, "history": [], "last_violation": None})
    entry["total"] += 1
    entry["last_violation"] = now_str
    entry["history"].append("2.2")
    violations_data[str(uid)] = entry
    save_violations(violations_data)

def play_sound(path="sound.mp3"):
    def _play():
        try:
            pygame.mixer.music.load(path)
            pygame.mixer.music.play()
        except Exception as e:
            print(f"[SOUND ERROR] {e}")
    threading.Thread(target=_play, daemon=True).start()

def gui_confirm(user_id, username, text, action):
    play_sound("sound.mp3")
    root = Tk()
    root.withdraw()
    ok = messagebox.askokcancel(
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ",
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} ({user_id})\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{text}\n\n"
        f"–î–µ–π—Å—Ç–≤–∏–µ: {action}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?"
    )
    root.destroy()
    return ok

def get_toxicity_score(text):
    tokens = rubert_tokenizer(text, return_tensors="pt", truncation=True, padding=True).to(device)
    with torch.no_grad():
        logits = rubert_model(**tokens).logits
        probs = F.softmax(logits, dim=1)
    return probs[0][1].item()

async def check_mistral(text):
    prompt = f"""–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ Discord. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –Ω–∞—Ä—É—à–∞–µ—Ç –ª–∏ –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω–æ–µ –Ω–∏–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–æ 2.2 —Å–µ—Ä–≤–µ—Ä–∞.

üîπ **–ü—Ä–∞–≤–∏–ª–æ 2.2:**
–ó–∞–ø—Ä–µ—â–µ–Ω—ã –º–Ω–æ–≥–æ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ —Ü–µ–ª–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–∏. –ü—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–∞—Ç–∞ –∏–ª–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–±–ª–∏–Ω", "–∂–µ—Å—Ç—å", "—ç—Ç–æ –ø–∏–∑–¥–µ—Ü") ‚Äî –Ω–µ —Å—á–∏—Ç–∞—é—Ç—Å—è –Ω–∞—Ä—É—à–µ–Ω–∏–µ–º, –µ—Å–ª–∏ –Ω–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—Ä–æ—Ç–∏–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ª—é–¥–µ–π.

–ü—Ä–∏–º–µ—Ä—ã –Ω–∞—Ä—É—à–µ–Ω–∏–π:
- "–¢—ã –¥–µ–±–∏–ª, –∏–¥–∏–æ—Ç, –∑–∞—Ç–∫–Ω–∏—Å—å"
- "–í—ã —Ç–≤–∞—Ä–∏, –∫–∞–∫ —Å –≤–∞–º–∏ –º–æ–∂–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç—å?"
- "–ó–∞–∫—Ä–æ–π —Ä–æ—Ç, –∂–∏–≤–æ—Ç–Ω–æ–µ"

–ü—Ä–∏–º–µ—Ä—ã –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π:
- "—ç—Ç–æ –ø–∏–∑–¥–µ—Ü"
- "–Ω—É –∏ –∂–æ–ø–∞"
- "–∫–∞–∫ –∂–µ –º–µ–Ω—è –≤—Å—ë –±–µ—Å–∏—Ç!"

üîπ **–°–æ–æ–±—â–µ–Ω–∏–µ:**
 "{text.strip()}" 

–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ **—Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ**, —Å—Ç—Ä–æ–≥–æ –æ–¥–Ω–∏–º –∏–∑ –¥–≤—É—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:

- **"1"** - –Ω–∞—Ä—É—à–µ–Ω–∏–µ 
- **"0"** - –Ω–µ—Ç –Ω–∞—Ä—É—à–µ–Ω–∏—è
"""
    payload = {
        "model": MISTRAL_MODEL,
        "prompt": prompt,
        "stream": False,
        "options": {"temperature": 0}
    }
    try:
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as sess:
            async with sess.post(OLLAMA_URL, json=payload) as resp:
                data = await resp.json()
                out = data.get("response", "").strip()
                print(f"[MISTRAL RAW]: {out}")
                clean = re.sub(r'[\*\s"¬´¬ª-]+', '', out)
                return clean.startswith("1")
    except Exception as e:
        print(f"[MISTRAL ERROR] {e}")
        return False

async def log_action(channel_id, user_id, username, ts, text, rule, action):
    if not WEBHOOK_URL:
        return
    content = (
        f"üîî –ù–∞—Ä—É—à–µ–Ω–∏–µ\n"
        f"–ö–∞–Ω–∞–ª: <#{channel_id}>\n"
        f"–ê–≤—Ç–æ—Ä: <@{user_id}> ({username})\n"
        f"–í—Ä–µ–º—è: {ts}\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–µ: \"{text}\"\n"
        f"–ü—Ä–∞–≤–∏–ª–æ: {rule}\n"
        f"–î–µ–π—Å—Ç–≤–∏–µ: {action}"
    )
    async with aiohttp.ClientSession() as sess:
        await sess.post(WEBHOOK_URL, json={"content": content})

def is_adekvatnee(text):
    return bool(re.search(r"–∞–¥–µ–∫.*?—Ç–Ω.*?", text, re.IGNORECASE | re.DOTALL))

def is_pred_22(text):
    return bool(re.search(r"\\b–ø—Ä–µ–¥[^\n]*2\\.2", text, re.IGNORECASE))

class ModeratorClient(discord.Client):
    async def on_ready(self):
        print(f"[LOGIN] {self.user} ({self.user.id})")

    async def on_message(self, message):
        now = datetime.now(timezone(timedelta(hours=3)))
        if now.hour not in [9, 13, 17]: return
        if message.author.id == self.user.id: return

        # --- –ß—Ç–µ–Ω–∏–µ –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ ---
        if message.author.id == MODERATOR_ID:
            if message.mentions:
                mentioned_id = message.mentions[0].id
                if is_adekvatnee(message.content) or is_pred_22(message.content):
                    print(f"[MODLOG] –ù–∞—Ä—É—à–µ–Ω–∏–µ –æ—Ç –º–æ–¥–µ—Ä–∞: {mentioned_id}")
                    add_violation(mentioned_id)
            return

        if message.channel.id not in CHANNELS_FORCHECK: return

        txt = message.content
        uid = message.author.id
        if uid in IGNORED_USERS:
            return
        uname = str(message.author)
        cid = message.channel.id

        score = get_toxicity_score(txt)
        print(f"[TOX] {score:.3f} | {uname} | {txt}")
        if score < TOXICITY_THRESHOLD:
            return

        if not await check_mistral(txt):
            print("[MISTRAL] –ù–µ—Ç –Ω–∞—Ä—É—à–µ–Ω–∏—è")
            return

        user_violations[uid] += 1
        cnt = user_violations[uid]
        if uid in violation_timers:
            violation_timers[uid].cancel()
        violation_timers[uid] = asyncio.get_event_loop().call_later(
            600, lambda: user_violations.pop(uid, None)
        )
        ts = now.strftime("%Y-%m-%d %H:%M:%S")

        if cnt == 1:
            action = f"<@{uid}> ‚Äî –∞–¥–µ–∫–≤–∞—Ç–Ω–µ–µ"
        elif cnt == 2:
            action = f"<@{uid}> ‚Äî –ø—Ä–µ–¥ 2.2"
        elif cnt == 3:
            cmds = await message.channel.application_commands()
            mute = [c for c in cmds if c.name=="mute" and str(c.application_id)==str(MUTE_BOT_ID)]
            if mute:
                await mute[0].__call__(message.channel, user=uid, time="20", reason="2.2")
            else:
                action = "mute –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            user_violations.pop(uid, None)
            violation_timers.pop(uid, None)
        else:
            return

        ok = True
        if MANUAL_MODE:
            ok = gui_confirm(uid, uname, txt, action)
        if not ok:
            user_violations[uid] = max(user_violations.get(uid,1)-1,0)
            print("[INFO] –ù–∞—Ä—É—à–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return

        try:
            await message.delete()
            print("[DELETE]", txt)
        except Exception as e:
            print("[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å:", e)

        await message.channel.send(action)
        print("[ACTION]", action)

        add_violation(uid)
        await log_action(cid, uid, uname, ts, txt, "2.2", action)

rubert_tokenizer = AutoTokenizer.from_pretrained("cointegrated/rubert-tiny-toxicity")
rubert_model = AutoModelForSequenceClassification.from_pretrained(
    "cointegrated/rubert-tiny-toxicity"
).to(torch.device("cuda" if torch.cuda.is_available() else "cpu"))
rubert_model.eval()

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
user_violations = defaultdict(int)
violation_timers = {}

if __name__ == "__main__":
    mode = input("–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã ‚Äî –∞–≤—Ç–æ (a) / —Ä—É—á–Ω–æ–π (m)? [a/m]: ").strip().lower()
    MANUAL_MODE = not mode.startswith("a")
    print("–†—É—á–Ω–æ–π —Ä–µ–∂–∏–º:", MANUAL_MODE)
    client = ModeratorClient()
    asyncio.run(client.start(TOKEN))
